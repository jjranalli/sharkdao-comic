/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721Test, ERC721TestInterface } from "../ERC721Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016c1380380620016c18339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000287565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b61142a80620002976000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636a6278421161008c578063a22cb46511610066578063a22cb465146101e1578063b88d4fde146101f4578063c87b56dd14610207578063e985e9c51461021a57600080fd5b80636a627842146101a557806370a08231146101b857806395d89b41146101d957600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806323b872dd1461016c57806342842e0e1461017f5780636352211e1461019257600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610f3d565b610256565b60405190151581526020015b60405180910390f35b61011f6102a8565b60405161010e9190610fb2565b61013f61013a366004610fc5565b61033a565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610ffa565b6103d4565b005b61016a61017a366004611024565b6104e9565b61016a61018d366004611024565b61051a565b61013f6101a0366004610fc5565b610535565b61016a6101b3366004611060565b6105ac565b6101cb6101c6366004611060565b6105cf565b60405190815260200161010e565b61011f610656565b61016a6101ef36600461107b565b610665565b61016a6102023660046110cd565b610674565b61011f610215366004610fc5565b6106ac565b6101026102283660046111a9565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061028757506001600160e01b03198216635b5e139f60e01b145b806102a257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102b7906111dc565b80601f01602080910402602001604051908101604052809291908181526020018280546102e3906111dc565b80156103305780601f1061030557610100808354040283529160200191610330565b820191906000526020600020905b81548152906001019060200180831161031357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166103b85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006103df82610535565b9050806001600160a01b0316836001600160a01b03160361044c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016103af565b336001600160a01b038216148061046857506104688133610228565b6104da5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016103af565b6104e48383610794565b505050565b6104f33382610802565b61050f5760405162461bcd60e51b81526004016103af90611216565b6104e48383836108f9565b6104e483838360405180602001604052806000815250610674565b6000818152600260205260408120546001600160a01b0316806102a25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016103af565b6105be816105b960065490565b610a95565b6105cc600680546001019055565b50565b60006001600160a01b03821661063a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016103af565b506001600160a01b031660009081526003602052604090205490565b6060600180546102b7906111dc565b610670338383610aaf565b5050565b61067e3383610802565b61069a5760405162461bcd60e51b81526004016103af90611216565b6106a684848484610b7d565b50505050565b6000818152600260205260409020546060906001600160a01b031661072b5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016103af565b600061074260408051602081019091526000815290565b90506000815111610762576040518060200160405280600081525061078d565b8061076c84610bb0565b60405160200161077d929190611267565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906107c982610535565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b031661087b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016103af565b600061088683610535565b9050806001600160a01b0316846001600160a01b031614806108c15750836001600160a01b03166108b68461033a565b6001600160a01b0316145b806108f157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661090c82610535565b6001600160a01b0316146109705760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016103af565b6001600160a01b0382166109d25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103af565b6109dd600082610794565b6001600160a01b0383166000908152600360205260408120805460019290610a069084906112ac565b90915550506001600160a01b0382166000908152600360205260408120805460019290610a349084906112c3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610670828260405180602001604052806000815250610cb1565b816001600160a01b0316836001600160a01b031603610b105760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103af565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610b888484846108f9565b610b9484848484610ce4565b6106a65760405162461bcd60e51b81526004016103af906112db565b606081600003610bd75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610c015780610beb8161132d565b9150610bfa9050600a8361135c565b9150610bdb565b60008167ffffffffffffffff811115610c1c57610c1c6110b7565b6040519080825280601f01601f191660200182016040528015610c46576020820181803683370190505b5090505b84156108f157610c5b6001836112ac565b9150610c68600a86611370565b610c739060306112c3565b60f81b818381518110610c8857610c88611384565b60200101906001600160f81b031916908160001a905350610caa600a8661135c565b9450610c4a565b610cbb8383610de5565b610cc86000848484610ce4565b6104e45760405162461bcd60e51b81526004016103af906112db565b60006001600160a01b0384163b15610dda57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610d2890339089908890889060040161139a565b6020604051808303816000875af1925050508015610d63575060408051601f3d908101601f19168201909252610d60918101906113d7565b60015b610dc0573d808015610d91576040519150601f19603f3d011682016040523d82523d6000602084013e610d96565b606091505b508051600003610db85760405162461bcd60e51b81526004016103af906112db565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506108f1565b506001949350505050565b6001600160a01b038216610e3b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103af565b6000818152600260205260409020546001600160a01b031615610ea05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103af565b6001600160a01b0382166000908152600360205260408120805460019290610ec99084906112c3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146105cc57600080fd5b600060208284031215610f4f57600080fd5b813561078d81610f27565b60005b83811015610f75578181015183820152602001610f5d565b838111156106a65750506000910152565b60008151808452610f9e816020860160208601610f5a565b601f01601f19169290920160200192915050565b60208152600061078d6020830184610f86565b600060208284031215610fd757600080fd5b5035919050565b80356001600160a01b0381168114610ff557600080fd5b919050565b6000806040838503121561100d57600080fd5b61101683610fde565b946020939093013593505050565b60008060006060848603121561103957600080fd5b61104284610fde565b925061105060208501610fde565b9150604084013590509250925092565b60006020828403121561107257600080fd5b61078d82610fde565b6000806040838503121561108e57600080fd5b61109783610fde565b9150602083013580151581146110ac57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156110e357600080fd5b6110ec85610fde565b93506110fa60208601610fde565b925060408501359150606085013567ffffffffffffffff8082111561111e57600080fd5b818701915087601f83011261113257600080fd5b813581811115611144576111446110b7565b604051601f8201601f19908116603f0116810190838211818310171561116c5761116c6110b7565b816040528281528a602084870101111561118557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156111bc57600080fd5b6111c583610fde565b91506111d360208401610fde565b90509250929050565b600181811c908216806111f057607f821691505b60208210810361121057634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008351611279818460208801610f5a565b83519083019061128d818360208801610f5a565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156112be576112be611296565b500390565b600082198211156112d6576112d6611296565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60006001820161133f5761133f611296565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261136b5761136b611346565b500490565b60008261137f5761137f611346565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113cd90830184610f86565b9695505050505050565b6000602082840312156113e957600080fd5b815161078d81610f2756fea264697066735822122080de163b6044c524b31464cfd838580c5c1aa6b44e553a5b3fb58add18ef9bd064736f6c634300080d0033";

type ERC721TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Test__factory extends ContractFactory {
  constructor(...args: ERC721TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC721Test";
  }

  deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721Test> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC721Test>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  attach(address: string): ERC721Test {
    return super.attach(address) as ERC721Test;
  }
  connect(signer: Signer): ERC721Test__factory {
    return super.connect(signer) as ERC721Test__factory;
  }
  static readonly contractName: "ERC721Test";
  public readonly contractName: "ERC721Test";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721TestInterface {
    return new utils.Interface(_abi) as ERC721TestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Test {
    return new Contract(address, _abi, signerOrProvider) as ERC721Test;
  }
}
